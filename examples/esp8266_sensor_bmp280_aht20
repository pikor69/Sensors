//espnow sender/sensor for 8266 with bmp280 and aht20

#include <ESP8266WiFi.h>
#include <Espnow.h>
#include <Wire.h>
#include <BMP280.h> // by dvarrel, ver. 1.0.3
#include <AHT20.h> // by dvarrel, ver. 1.0.1
#include <ArduinoJson.h> // by Benoit Blanchon, ver. 7.2.1

uint8_t receiverAddress[] = {0x40, 0x25, 0x25, 0x18, 0x39, 0x64}; // change for the receiver's MAC

BMP280 bmp280; 
AHT20 aht20;

String jsondata;
StaticJsonDocument<200> doc;


void setup() {

  Serial.begin(115200);
  Serial.println();

  WiFi.mode(WIFI_STA);

  Wire.begin(); //Join I2C bus
  bmp280.begin();
  aht20.begin();
  
  pinMode(LED_BUILTIN, OUTPUT);

  setupEspNow();
}

void setupEspNow() {  
  if (esp_now_init() != 0) {
    Serial.println("Error initializing ESP-NOW");
    delay(1000);
    ESP.restart();
  }

  esp_now_set_self_role(ESP_NOW_ROLE_CONTROLLER);
  esp_now_register_send_cb(onDataSent);
  
  int status = esp_now_add_peer(receiverAddress, ESP_NOW_ROLE_SLAVE, 1, NULL, 0);
  if (status == 0) {
    Serial.println("Adding peer succeeded");
  } else {
    Serial.println("Adding peer failed.");
  }
  
}

void onDataSent(uint8_t* mac_addr, uint8_t sendStatus) {
  if (sendStatus == 0){
    Serial.println("Delivery succeeded");
  } else{
    Serial.println("Delivery failed!");
  }
}


void loop() {

  jsondata = "";  //clearing String after data is being sent

  //Get BMP280 values
  float temperature = bmp280.getTemperature();
  uint32_t pressure = bmp280.getPressure();
   
  //Get AHT20 values
  float temperature2 = aht20.getTemperature();
  float humidity = aht20.getHumidity();

  doc["sensorID"] = "sensor1";   
  doc["weather"]["temp"] = int((temperature + temperature2) * 50); //averaging between bmp280 and aht20
  doc["weather"]["pressure"] = pressure;
  doc["weather"]["humidity"] = int(humidity*100);
  
  serializeJson(doc, jsondata);  //Serializing JSON
  Serial.println(jsondata);

  int status = esp_now_send(receiverAddress, (uint8_t *) jsondata.c_str(), jsondata.length()+1);

  digitalWrite(LED_BUILTIN, LOW);  // blink for confirmation
  delay(100); 
  digitalWrite(LED_BUILTIN, HIGH);
  
  if (status == 0) {
    Serial.println("Sending message succeeded");
  } else {
    Serial.println("Sending message failed");
  }
  
  system_deep_sleep(10e6);
  delay(100);                 // I found this delay necessary to wait for the release of the I2C bus, otherwise a part on the next loop() is being executed before going to sleep 
  
}
